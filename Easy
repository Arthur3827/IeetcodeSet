Given an array nums and a value val, remove all instances of that value in-place and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.

给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。

不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。

元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

方法一：JAVA 方法1：两个指针追逐： 比较fast与元素与val的值，如果相等则遍历下一个元素，
如果不相等将该处元素移动到slow处，slow表示最终数组最末尾的元素位置。缺点：可能需要移动所有非val元素。

class Solution {
    public int removeElement(int[] nums, int val){
          if(nums.length==0)
            return 0;
        int slow = 0;
        int fast = 0;
        for(fast=0;fast<nums.length;fast++){
            if(nums[fast]!=val) {
                nums[slow++] = nums[fast];
                continue;
            }
        }
        return slow;
    }
}

方法二：方法2：指针碰撞，将当前head处元素与val比较，如果相等tail元素赋值给head，并减一。如果不相等head++，相当于tail不断给head喂元素，
让head去判断，判断结果有两种情况，相等或者不相等，如果不相等head遍历下一个，如果相等，将tail元素喂给head，tail移动到新元素位置，
而head当前元素又是新的值，进入下一次判断。比方法一移动更少元素
class Solution {
    public int removeElement(int[] nums, int val){
        
        if(nums.length == 0)
            return 0;
        int head = 0;
        int tail = nums.length-1;
        while(head < tail){
            if(nums[head] == val){
                nums[head]+=nums[tail];
                nums[tail] = nums[head] -nums[tail];
                nums[head] = nums[head] - nums[tail];
                // 此处可以不交换，直接赋值
                tail--;
            }else {
                head++;
            }
        }
        if(nums[head]!=val)
            head++;
        return head;
    }
}
